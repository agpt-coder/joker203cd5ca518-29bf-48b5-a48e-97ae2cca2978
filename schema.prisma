// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider                    = "prisma-client-py"
  interface                   = "asyncio"
  recursive_type_depth        = 5
  previewFeatures             = ["postgresqlExtensions"]
  enable_experimental_decimal = true
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String   @unique
  role      Role
  Logs      Log[]
}

model Log {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  createdAt     DateTime     @default(now())
  action        String
  userId        String
  User          User         @relation(fields: [userId], references: [id])
  APIEndpoint   APIEndpoint? @relation(fields: [aPIEndpointId], references: [id])
  aPIEndpointId String?
}

model Joke {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  source    String
}

model Module {
  id          String     @id @default(dbgenerated("gen_random_uuid()"))
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  description String
  Functions   Function[]
}

model Function {
  id          String        @id @default(dbgenerated("gen_random_uuid()"))
  createdAt   DateTime      @default(now())
  moduleId    String
  Module      Module        @relation(fields: [moduleId], references: [id])
  description String
  sourceCode  String
  APIEndpoint APIEndpoint[]
}

model APIEndpoint {
  id           String     @id @default(dbgenerated("gen_random_uuid()"))
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  path         String
  method       HttpMethod
  handlerId    String
  Handler      Function   @relation(fields: [handlerId], references: [id])
  rateLimit    Int
  FunctionLogs Log[]
}

model FunctionStatus {
  id          String     @id @default(dbgenerated("gen_random_uuid()"))
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  statusType  StatusType
  description String
  details     Json?
}

enum Role {
  API_User
  API_Admin
  System_Operator
}

enum HttpMethod {
  GET
  POST
  PUT
  DELETE
}

enum StatusType {
  Ongoing
  Success
  Error
}

